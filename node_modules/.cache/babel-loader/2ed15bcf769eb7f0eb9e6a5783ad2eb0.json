{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; //récupère les données d'une API\n\nexport function useFetch(url) {\n  _s();\n\n  const [data, setData] = useState({});\n  const [isLoading, setLoading] = useState(false); //indique si les données sont en train de se charger\n\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    if (!url) return;\n    setLoading(true); //affiche le loader\n\n    fetch(url).then(response => response.json()) //convertit la réponse en données JSON\n    .then(data => {\n      //traite les données reçues\n      setData(data);\n      console.log(error);\n    }).catch(error => {\n      console.log(error);\n      setError(true);\n    });\n    setTimeout(() => {\n      setLoading(false);\n    }, 500); //enlève le loader. setTimeout sert juste à confirmer l'affichage du loader en cas de délai de chargement des données\n  }, [url]); //déclenche l'appel de useEffect si l'url change\n\n  return {\n    isLoading,\n    data,\n    error\n  };\n} //Exemple n°2 récupère les données d'une API \n\n_s(useFetch, \"kYknsBEF+Hl6WNY7Rqr4TzyRBlc=\");\n\nexport function useFetch2(url) {\n  _s2();\n\n  const [data, setData] = useState({});\n  const [isLoading, setLoading] = useState(false); //indique si les données sont en train de se charger\n\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    if (!url) return;\n    setLoading(true); //affiche le loader\n    //déclaration de la fonction fetchData\n\n    async function fetchData() {\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        setData(data);\n      } catch (err) {\n        console.log(err);\n        setError(true);\n      } finally {\n        //traitement après l'appel\n        setLoading(false);\n      }\n    } //appel de la fonction fetchData\n\n\n    fetchData();\n  }, [url]); //déclenche l'appel de useEffect si l'url change\n\n  return {\n    isLoading,\n    data,\n    error\n  };\n}\n\n_s2(useFetch2, \"kYknsBEF+Hl6WNY7Rqr4TzyRBlc=\");","map":{"version":3,"sources":["C:/wamp64/www/shiny-agency/src/utils/hooks/hooks.jsx"],"names":["useState","useEffect","useFetch","url","data","setData","isLoading","setLoading","error","setError","fetch","then","response","json","console","log","catch","setTimeout","useFetch2","fetchData","err"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,UAAZ,IAA0BP,QAAQ,CAAC,KAAD,CAAxC,CAF0B,CAEqB;;AAC/C,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACE,GAAL,EAAU;AAEVI,IAAAA,UAAU,CAAC,IAAD,CAAV,CAHY,CAGI;;AAEhBG,IAAAA,KAAK,CAACP,GAAD,CAAL,CACKQ,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EACwC;AADxC,KAEKF,IAFL,CAEWP,IAAD,IAAU;AAAC;AACbC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACH,KALL,EAMKQ,KANL,CAMYR,KAAD,IAAW;AACdM,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACAC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KATL;AAYAQ,IAAAA,UAAU,CAAC,MAAM;AAACV,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAkB,KAA1B,EAA4B,GAA5B,CAAV,CAjBY,CAiB8B;AAC7C,GAlBQ,EAkBN,CAACJ,GAAD,CAlBM,CAAT,CAL0B,CAuBjB;;AAET,SAAO;AAACG,IAAAA,SAAD;AAAYF,IAAAA,IAAZ;AAAkBI,IAAAA;AAAlB,GAAP;AACH,C,CAED;;GA5BgBN,Q;;AA6BhB,OAAO,SAASgB,SAAT,CAAmBf,GAAnB,EAAwB;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,UAAZ,IAA0BP,QAAQ,CAAC,KAAD,CAAxC,CAF2B,CAEoB;;AAC/C,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACE,GAAL,EAAU;AAEVI,IAAAA,UAAU,CAAC,IAAD,CAAV,CAHY,CAGI;AAEhB;;AACA,mBAAeY,SAAf,GAA2B;AACvB,UAAI;AACA,cAAMP,QAAQ,GAAG,MAAMF,KAAK,CAACP,GAAD,CAA5B;AACA,cAAMC,IAAI,GAAG,MAAMQ,QAAQ,CAACC,IAAT,EAAnB;AACAR,QAAAA,OAAO,CAACD,IAAD,CAAP;AACH,OAJD,CAIE,OAAOgB,GAAP,EAAY;AACVN,QAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAX,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAPD,SAOU;AAAC;AACPF,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAjBW,CAmBZ;;;AACAY,IAAAA,SAAS;AACZ,GArBQ,EAqBN,CAAChB,GAAD,CArBM,CAAT,CAL2B,CA0BlB;;AAET,SAAO;AAAEG,IAAAA,SAAF;AAAaF,IAAAA,IAAb;AAAmBI,IAAAA;AAAnB,GAAP;AACH;;IA7BeU,S","sourcesContent":["import { useState, useEffect } from 'react'\n\n//récupère les données d'une API\nexport function useFetch(url) {\n    const [data, setData] = useState({})\n    const [isLoading, setLoading] = useState(false)//indique si les données sont en train de se charger\n    const [error, setError] = useState(false)\n\n    useEffect(() => {\n        if (!url) return\n        \n        setLoading(true)//affiche le loader\n        \n        fetch(url)\n            .then((response) => response.json())//convertit la réponse en données JSON\n            .then((data) => {//traite les données reçues\n                setData(data)\n                console.log(error)\n            })\n            .catch((error) => {\n                console.log(error)\n                setError(true)\n            })\n        \n\n        setTimeout(() => {setLoading(false)}, 500)//enlève le loader. setTimeout sert juste à confirmer l'affichage du loader en cas de délai de chargement des données\n    }, [url])//déclenche l'appel de useEffect si l'url change\n\n    return {isLoading, data, error}\n}\n\n//Exemple n°2 récupère les données d'une API \nexport function useFetch2(url) {\n    const [data, setData] = useState({})\n    const [isLoading, setLoading] = useState(false)//indique si les données sont en train de se charger\n    const [error, setError] = useState(false)\n\n    useEffect(() => {\n        if (!url) return\n        \n        setLoading(true)//affiche le loader\n     \n        //déclaration de la fonction fetchData\n        async function fetchData() {\n            try {\n                const response = await fetch(url)\n                const data = await response.json()\n                setData(data)\n            } catch (err) {\n                console.log(err)\n                setError(true)\n            } finally {//traitement après l'appel\n                setLoading(false)\n            }\n        }\n      \n        //appel de la fonction fetchData\n        fetchData()\n    }, [url])//déclenche l'appel de useEffect si l'url change\n    \n    return { isLoading, data, error }\n}"]},"metadata":{},"sourceType":"module"}