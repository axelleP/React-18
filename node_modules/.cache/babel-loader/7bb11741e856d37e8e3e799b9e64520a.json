{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; //récupère les données d'une API\n\nexport function useFetch(url) {\n  _s();\n\n  const [data, setData] = useState({}); //données API\n\n  const [isLoading, setLoading] = useState(true); //indique si les données sont en train de se charger\n\n  const [error, setError] = useState(false); //erreurs API\n\n  useEffect(() => {\n    if (!url) return;\n    setLoading(true); //affiche le loader\n\n    fetch(url).then(response => response.json() //convertit la réponse en données JSON\n    .then(_ref => {\n      let {\n        data\n      } = _ref;\n      //traite les données reçues\n      setData(data);\n    }).catch(error => {\n      //attrape les erreurs lors de l’appel de l’API s'il y en a\n      console.log(error);\n      setError(true);\n    }));\n    setTimeout(() => {\n      setLoading(false);\n    }, 500); //enlève le loader. setTimeout sert juste à confirmer l'affichage du loader en cas de délai de chargement des données\n  }, [url]); //déclenche l'appel de useEffect si l'url change\n\n  return {\n    isLoading,\n    data,\n    error\n  };\n}\n\n_s(useFetch, \"I3PlMlwpe/K4XMhtkGOVndNNG2k=\");\n\nexport function useFetch2(url) {\n  _s2();\n\n  const [data, setData] = useState({});\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    if (!url) return;\n    setLoading(true);\n\n    async function fetchData() {\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        setData(data);\n      } catch (err) {\n        console.log(err);\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [url]);\n  return {\n    isLoading,\n    data,\n    error\n  };\n} // faire un autre useFetch mais avec await\n\n_s2(useFetch2, \"I3PlMlwpe/K4XMhtkGOVndNNG2k=\");","map":{"version":3,"sources":["C:/wamp64/www/shiny-agency/src/utils/hooks/hooks.jsx"],"names":["useState","useEffect","useFetch","url","data","setData","isLoading","setLoading","error","setError","fetch","then","response","json","catch","console","log","setTimeout","useFetch2","fetchData","err"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC,CAD0B,CACU;;AACpC,QAAM,CAACM,SAAD,EAAYC,UAAZ,IAA0BP,QAAQ,CAAC,IAAD,CAAxC,CAF0B,CAEoB;;AAC9C,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC,CAH0B,CAGe;;AAEzCC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACE,GAAL,EAAU;AAEVI,IAAAA,UAAU,CAAC,IAAD,CAAV,CAHY,CAGI;;AAEhBG,IAAAA,KAAK,CAACP,GAAD,CAAL,CACKQ,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,GAAe;AAAf,KACnBF,IADmB,CACd,QAAc;AAAA,UAAb;AAAEP,QAAAA;AAAF,OAAa;AAAC;AACjBC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH,KAHmB,EAInBU,KAJmB,CAIZN,KAAD,IAAW;AAAC;AACfO,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACAC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KAPmB,CADxB;AAWAQ,IAAAA,UAAU,CAAC,MAAM;AAACV,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAkB,KAA1B,EAA4B,GAA5B,CAAV,CAhBY,CAgB8B;AAC7C,GAjBQ,EAiBN,CAACJ,GAAD,CAjBM,CAAT,CAL0B,CAsBjB;;AAET,SAAO;AAACG,IAAAA,SAAD;AAAYF,IAAAA,IAAZ;AAAkBI,IAAAA;AAAlB,GAAP;AACH;;GAzBeN,Q;;AA2BhB,OAAO,SAASgB,SAAT,CAAmBf,GAAnB,EAAwB;AAAA;;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,UAAZ,IAA0BP,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,GAAL,EAAU;AACVI,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,mBAAeY,SAAf,GAA2B;AACzB,UAAI;AACF,cAAMP,QAAQ,GAAG,MAAMF,KAAK,CAACP,GAAD,CAA5B;AACA,cAAMC,IAAI,GAAG,MAAMQ,QAAQ,CAACC,IAAT,EAAnB;AACAR,QAAAA,OAAO,CAACD,IAAD,CAAP;AACD,OAJD,CAIE,OAAOgB,GAAP,EAAY;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAX,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAPD,SAOU;AACRF,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;;AACDY,IAAAA,SAAS;AACV,GAhBQ,EAgBN,CAAChB,GAAD,CAhBM,CAAT;AAiBA,SAAO;AAAEG,IAAAA,SAAF;AAAaF,IAAAA,IAAb;AAAmBI,IAAAA;AAAnB,GAAP;AACD,C,CAGD;;IA1BgBU,S","sourcesContent":["import { useState, useEffect } from 'react'\n\n//récupère les données d'une API\nexport function useFetch(url) {\n    const [data, setData] = useState({})//données API\n    const [isLoading, setLoading] = useState(true)//indique si les données sont en train de se charger\n    const [error, setError] = useState(false)//erreurs API\n\n    useEffect(() => {\n        if (!url) return\n        \n        setLoading(true)//affiche le loader\n        \n        fetch(url)\n            .then((response) => response.json()//convertit la réponse en données JSON\n            .then(({ data }) => {//traite les données reçues\n                setData(data)\n            })\n            .catch((error) => {//attrape les erreurs lors de l’appel de l’API s'il y en a\n                console.log(error)\n                setError(true)\n            })\n        )\n\n        setTimeout(() => {setLoading(false)}, 500)//enlève le loader. setTimeout sert juste à confirmer l'affichage du loader en cas de délai de chargement des données\n    }, [url])//déclenche l'appel de useEffect si l'url change\n\n    return {isLoading, data, error}\n}\n\nexport function useFetch2(url) {\n  const [data, setData] = useState({})\n  const [isLoading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    if (!url) return\n    setLoading(true)\n    async function fetchData() {\n      try {\n        const response = await fetch(url)\n        const data = await response.json()\n        setData(data)\n      } catch (err) {\n        console.log(err)\n        setError(true)\n      } finally {\n        setLoading(false)\n      }\n    }\n    fetchData()\n  }, [url])\n  return { isLoading, data, error }\n}\n\n\n// faire un autre useFetch mais avec await"]},"metadata":{},"sourceType":"module"}